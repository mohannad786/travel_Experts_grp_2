{"version":3,"sources":["my-passport.js"],"names":["passport","require","bcrypt","LocalStrategy","Strategy","module","exports","init","app","use","secret","process","env","PASSPORT_SECRET","resave","saveUninitialized","User","console","log","username","password","done","findOne","err","user","compare","res","msg","serializeUser","id","deserializeUser","findById","initialize","session","post","req","next","authenticate","info","redirect","logIn","locals","errors","currentUser","get","logout"],"mappings":"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","sourcesContent":["const passport = require(\"passport\");\nconst bcrypt = require(\"bcryptjs\");\nconst LocalStrategy = require(\"passport-local\").Strategy;\n\n\n// Configure the app to use Passport\nmodule.exports.init = function (app) {\n  app.use(\n    require(\"express-session\")({\n      secret: process.env.PASSPORT_SECRET|| \"wserjoifjpsiofjfsdfs\",\n      resave: true,\n      saveUninitialized: true,\n    })\n  );\n\n  // Use a User Model to store and retrieve the user information\n  const { User } = require(\"./models/user\");\n  console.log(User)\n  passport.use(\n    // Do the login check\n    new LocalStrategy(function (username, password, done) {\n      User.findOne({ username: username }, function (err, user) {\n        if (err) {\n          return done(err);\n        } // Error loading user from DB\n        if (!user) {\n          return done(null, false);\n        } // No user\n        bcrypt.compare(password, user.password, (err, res) => {\n          if (res) {\n            // passwords match! log user in\n            return done(null, user);\n          } else {\n            // passwords do not match!\n            return done(null, false, { msg: \"Incorrect password\" });\n          }\n        });\n      });\n    })\n  );\n  // Serialize the User ID\n  passport.serializeUser(function (user, done) {\n    done(null, user.id);\n  });\n  // Deserialize the user ID\n  passport.deserializeUser(function (id, done) {\n    User.findById(id, function (err, user) {\n      done(err, user);\n    });\n  });\n  // Initialize Passport\n  app.use(passport.initialize());\n  app.use(passport.session());\n  // Login Endpoint, recieves the user login from a login form\n  // app.post(\"/login\",\n  //   passport.authenticate(\"local\", { failureRedirect: \"/\" }),\n  //   function (req, res) {\n  //     const headermessage = `Welcome ${req.user?.username}`;\n  //     res.redirect(\"/?headermessage=\" + headermessage);\n  //   }\n  // );\n  // After login, adds the user object to locals.currentUser which is accesible in the .pug files\n  app.post(\"/login\", function (req, res, next) {\n    passport.authenticate(\"local\", function (err, user, info) {\n      if (err) {\n        return next(err);\n      }\n      if (!user) {\n        return res.redirect(\"/signup\");\n      }\n      req.logIn(user, function (err) {\n        if (err) {\n          res.locals.errors = [\"Login failed\"];\n          return next(err);\n        }\n        return res.redirect(\"/\"); // Logged in\n      });\n    })(req, res, next);\n  });\n  \n    \n  app.use((req, res, next) => {\n    res.locals.currentUser = req.user;\n    next();\n  });\n\n  // The logout endpoint\n  app.get('/log-out', (req, res) => {\n    req.logout();\n    res.redirect(\"signup\");\n  });\n};"],"file":"my-passport.dev.js"}