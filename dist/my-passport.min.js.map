{"version":3,"sources":["my-passport.js"],"names":["passport","require","bcrypt","Strategy","module","LocalStrategy","app","use","secret","process","env","PASSPORT_SECRET","User","console","log","username","password","done","user","findOne","compare","err","res","msg","serializeUser","id","deserializeUser","findById","initialize","session","post","req","next","authenticate","info","logIn","locals","errors","redirect","get"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,YACnBC,OAASD,QAAQ,YADjBD,cAAkBC,QAAC,kBAAzBE,SAEAC,OAAMC,QAAAA,KAAgBJ,SAAQK,GAK5BA,EAAIC,IACFN,QAAQ,kBAARA,CAA2B,CAFzBO,OAANC,QAAsBC,IAAAC,iBAAe,uBAC/BJ,QACFN,EACEO,mBAAoBG,KAPI,IAIOC,EAUlBX,QAAQ,iBAVUW,KAAAC,QAAAC,IAAAF,GAYnCZ,SAASO,IAATP,IAAAA,cACE,SAAAe,EAAAC,EAAAC,GACIZ,EAAAA,QAAJ,CAAkBU,SAAUA,GAAUC,SAAUC,EAAMC,GAChD,OAACC,EAAoBJ,EAAAA,GACvBG,OAMAhB,OAAOkB,QAAQJ,EAAUE,EAAKF,SAAU,SAACK,EAAKC,GAC5C,OAAIA,EAHOL,EAAA,KAAOC,GAQTD,EAAK,MAAM,EAAO,CAAEM,IAAK,yBAX3BN,EAAKI,MAAZ,QAWErB,SAAAwB,cAAY,SAAaN,EAAAD,GAAEM,EAAAA,KAAGL,EAAEO,MAEnCzB,SARD0B,gBAAA,SAAAD,EAAAR,GASDL,EAhBDe,SAAAF,EAAA,SAAAJ,EAAAH,GAf+BD,EAkCnCI,EAAAH,OAGCZ,EACDC,IAAAP,SAAA4B,cAQAtB,EAAIC,IAAIP,SAAS6B,WAGjBvB,EAAAwB,KAAA,SAAA,SAAAC,EAAAT,EAAAU,GACAhC,SAAAiC,aAAA,QAAA,SAAAZ,EAAAH,EAAAgB,GACA,OAAAb,EACAW,EAAAX,GAEAH,OAEIY,EAAJK,MAASjB,EAAU,SAAUa,GAC3B/B,OAAQqB,GACFA,EAAJe,OAASC,OAAA,CAAA,gBACAL,EAAKX,IAULC,EAAIgB,SAAS,OAd1BhB,EAAAgB,SAAA,YALAtC,CAYM+B,EAAAT,EAAOA,KAGPhB,EAAAC,IAAA,SAAAwB,EAAAT,EAASU,GACPV,EAAAA,OAAIc,YAAJL,EAAqBb,KACrBc,MAGH1B,EAAAiC,IAND,WAAA,SAAAR,EAAAT,GAODS,EAAEA,SAfLT,EAAAgB,SAAA","file":"my-passport.min.js","sourcesContent":["const passport = require(\"passport\");\nconst bcrypt = require(\"bcryptjs\");\nconst LocalStrategy = require(\"passport-local\").Strategy;\n\n\n// Configure the app to use Passport\nmodule.exports.init = function (app) {\n  app.use(\n    require(\"express-session\")({\n      secret: process.env.PASSPORT_SECRET|| \"wserjoifjpsiofjfsdfs\",\n      resave: true,\n      saveUninitialized: true,\n    })\n  );\n\n  // Use a User Model to store and retrieve the user information\n  const { User } = require(\"./models/user\");\n  console.log(User)\n  passport.use(\n    // Do the login check\n    new LocalStrategy(function (username, password, done) {\n      User.findOne({ username: username }, function (err, user) {\n        if (err) {\n          return done(err);\n        } // Error loading user from DB\n        if (!user) {\n          return done(null, false);\n        } // No user\n        bcrypt.compare(password, user.password, (err, res) => {\n          if (res) {\n            // passwords match! log user in\n            return done(null, user);\n          } else {\n            // passwords do not match!\n            return done(null, false, { msg: \"Incorrect password\" });\n          }\n        });\n      });\n    })\n  );\n  // Serialize the User ID\n  passport.serializeUser(function (user, done) {\n    done(null, user.id);\n  });\n  // Deserialize the user ID\n  passport.deserializeUser(function (id, done) {\n    User.findById(id, function (err, user) {\n      done(err, user);\n    });\n  });\n  // Initialize Passport\n  app.use(passport.initialize());\n  app.use(passport.session());\n  // Login Endpoint, recieves the user login from a login form\n  // app.post(\"/login\",\n  //   passport.authenticate(\"local\", { failureRedirect: \"/\" }),\n  //   function (req, res) {\n  //     const headermessage = `Welcome ${req.user?.username}`;\n  //     res.redirect(\"/?headermessage=\" + headermessage);\n  //   }\n  // );\n  // After login, adds the user object to locals.currentUser which is accesible in the .pug files\n  app.post(\"/login\", function (req, res, next) {\n    passport.authenticate(\"local\", function (err, user, info) {\n      if (err) {\n        return next(err);\n      }\n      if (!user) {\n        return res.redirect(\"/signup\");\n      }\n      req.logIn(user, function (err) {\n        if (err) {\n          res.locals.errors = [\"Login failed\"];\n          return next(err);\n        }\n        return res.redirect(\"/\"); // Logged in\n      });\n    })(req, res, next);\n  });\n  \n    \n  app.use((req, res, next) => {\n    res.locals.currentUser = req.user;\n    next();\n  });\n\n  // The logout endpoint\n  app.get('/log-out', (req, res) => {\n    req.logout();\n    res.redirect(\"/\");\n  });\n};"]}