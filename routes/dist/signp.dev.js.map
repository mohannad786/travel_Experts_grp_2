{"version":3,"sources":["signp.js"],"names":["express","require","router","Router","Post","User","bcrypt","pageRegister","pagetitle","pageheading","pagemessage","hideLogin","get","req","res","next","render","post","user","body","errs","validateSync","processErrors","hash","password","err","hashedPassword","save","result","headermessage","fname","redirect","errorArray","errorKeys","Object","keys","errors","forEach","key","push","message","module","exports"],"mappings":";;;;;;;;AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAb;;AACA,IAAMC,IAAI,GAAGH,OAAO,CAAC,gBAAD,CAAP,CAA0BG,IAAvC;;AAGA,IAAIJ,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAb;;eACiBF,OAAO,CAAC,gBAAD,C;IAAhBI,I,YAAAA,I;;AACR,IAAMC,MAAM,GAAGL,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAMM,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,SADQ;AAEnBC,EAAAA,WAAW,EAAE,sBAFM;AAGnBC,EAAAA,WAAW,EAAE,gEAHM;AAInBC,EAAAA,SAAS,EAAE;AAJQ,CAArB,C,CAMA;AACA;AACA;AACA;AACA;;AAEA;;AACAT,MAAM,CAACU,GAAP,CAAW,GAAX,EAAgB,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACxCD,EAAAA,GAAG,CAACE,MAAJ,CAAW,SAAX,EAAsBT,YAAtB;AACD,CAFD;AAIAL,MAAM,CAACe,IAAP,CAAY,GAAZ,EAAiB,UAAUJ,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACzC;AACA,MAAMG,IAAI,GAAG,IAAIb,IAAJ,CAASQ,GAAG,CAACM,IAAb,CAAb;AACA,MAAMC,IAAI,GAAGF,IAAI,CAACG,YAAL,EAAb,CAHyC,CAGP;;AAClC,MAAID,IAAJ,EAAU;AACR,WAAOE,aAAa,CAACF,IAAD,EAAOP,GAAP,EAAYC,GAAZ,CAApB;AACD;;AACDR,EAAAA,MAAM,CAACiB,IAAP,CAAYV,GAAG,CAACM,IAAJ,CAASK,QAArB,EAA+B,EAA/B,EAAmC,UAACC,GAAD,EAAMC,cAAN,EAAyB;AAC1D,QAAID,GAAJ,EAAS,MAAMA,GAAN,CADiD,CAE1D;;AACAP,IAAAA,IAAI,CAACM,QAAL,GAAgBE,cAAhB,CAH0D,CAI1D;;AACAR,IAAAA,IAAI,CAACS,IAAL,CAAU,UAACF,GAAD,EAAMG,MAAN,EAAiB;AACzB,UAAIH,GAAJ,EAAS;AACP,eAAOH,aAAa,CAACG,GAAD,EAAMZ,GAAN,EAAWC,GAAX,CAApB;AACD,OAHwB,CAIzB;;;AACA,UAAMe,aAAa,6BAAsBD,MAAM,CAACE,KAA7B,CAAnB;AACAhB,MAAAA,GAAG,CAACiB,QAAJ,CAAa,qBAAqBF,aAAlC;AACD,KAPD;AAQD,GAbD;AAcD,CArBD;;AAuBA,SAASP,aAAT,CAAuBF,IAAvB,EAA6BP,GAA7B,EAAkCC,GAAlC,EAAuC;AACrC;AACA,MAAMkB,UAAU,GAAG,EAAnB;AACA,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYf,IAAI,CAACgB,MAAjB,CAAlB;AACAH,EAAAA,SAAS,CAACI,OAAV,CAAkB,UAACC,GAAD;AAAA,WAASN,UAAU,CAACO,IAAX,CAAgBnB,IAAI,CAACgB,MAAL,CAAYE,GAAZ,EAAiBE,OAAjC,CAAT;AAAA,GAAlB;AACA,SAAO1B,GAAG,CAACE,MAAJ,CAAW,QAAX,oBACFT,YADE;AAEL6B,IAAAA,MAAM,EAAEJ;AAFH,KAGFnB,GAAG,CAACM,IAHF,EAAP;AAKD;;AAEDsB,MAAM,CAACC,OAAP,GAAiBxC,MAAjB","sourcesContent":["var express = require('express');\r\nvar router = express.Router();\r\nconst Post = require('../models/user').Post;\r\n\r\n\r\nvar express = require(\"express\");\r\nvar router = express.Router();\r\nconst { User } = require(\"../models/user\");\r\nconst bcrypt = require(\"bcryptjs\");\r\n\r\nconst pageRegister = {\r\n  pagetitle: \"Sign-up\",\r\n  pageheading: \"Create a new account\",\r\n  pagemessage: \"Please enter the required information to create a new account.\",\r\n  hideLogin: true,\r\n};\r\n// const pageShowPosts = {\r\n//   pagetitle: \"Blog posts\",\r\n//   pageheading: \"List all posts\",\r\n//   pagemessage: \"These are all postets.\",\r\n// };\r\n\r\n/* Sign-up page. */\r\nrouter.get(\"/\", function (req, res, next) {\r\n  res.render(\"/signup\", pageRegister);\r\n});\r\n\r\nrouter.post(\"/\", function (req, res, next) {\r\n  // Create a new user object from the User Model\r\n  const user = new User(req.body);\r\n  const errs = user.validateSync(); // Run the model validation\r\n  if (errs) {\r\n    return processErrors(errs, req, res);\r\n  }\r\n  bcrypt.hash(req.body.password, 10, (err, hashedPassword) => {\r\n    if (err) throw err;\r\n    // Replace the plain password with the hashed password\r\n    user.password = hashedPassword;\r\n    // Store the use object in the DB\r\n    user.save((err, result) => {\r\n      if (err) {\r\n        return processErrors(err, req, res);\r\n      }\r\n      //console.log(result);\r\n      const headermessage = `Account created ${result.fname}`;\r\n      res.redirect(\"/?headermessage=\" + headermessage);\r\n    });\r\n  });\r\n});\r\n\r\nfunction processErrors(errs, req, res) {\r\n  // If there are errors from the Model schema\r\n  const errorArray = [];\r\n  const errorKeys = Object.keys(errs.errors);\r\n  errorKeys.forEach((key) => errorArray.push(errs.errors[key].message));\r\n  return res.render(\"signup\", {\r\n    ...pageRegister,\r\n    errors: errorArray,\r\n    ...req.body,\r\n  });\r\n}\r\n\r\nmodule.exports = router;"],"file":"signp.dev.js"}