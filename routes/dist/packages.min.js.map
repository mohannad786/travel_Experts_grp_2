{"version":3,"sources":["packages.js"],"names":["express","require","router","Router","MongoClient","mongo","getPackages","pid","callback","connect","MONGO_URL","uniqueValidator","useUnifiedTopology","err","useNewUrlParser","db","collection","query","client","packid","parseInt","find","toArray","items","get","req","res","next","packdata","render","mypackages","params","data","module","exports"],"mappings":"aAAA,IAAIA,QAAUC,QAAQ,WAClBC,OAASF,QAAQG,SADjBH,MAAUC,QAAQ,WAAtBG,YAEMC,gBAAgBJ,QAAWG,6BAMjC,SAASE,YAAYC,EAAKC,GACxBH,MAAMI,QAAQC,UAAW,CAHrBC,iBAAe,EAKjBC,oBAAoB,GAFtBP,SAAAA,EAAMI,GAAsB,GAAAI,EAAA,MAAAA,EAC1BC,IACAF,EADAE,EAAiBC,GADM,YAEHC,WAAA,YAEpBC,EAAMC,GAAcX,IAAAU,EAAAE,OAAAC,SAAAb,IAClBS,EAASK,KAAAJ,GAAAK,QAAA,SAAAT,EAAAU,GAEHP,EAAAA,EAAaD,OA6BzBb,OAAAsB,IAAA,IAAA,SAAAC,EAAAC,EAAAC,GAOErB,YAAY,KAHd,SAAAO,EAAAe,GAKM,GAAIf,EAAK,MAAMA,EAJfa,EAANG,OAAgB,WAAA,CACdC,WAAAF,QAMME,OAAAA,IAAAA,mBAAYF,SAAAA,EAAAA,EAAAA,GAEftB,YAHCmB,EAAAM,OAAAZ,OANN,SAAAN,EAAAmB,GAaA,GAAAnB,EAAA,MAAAA,EAMMa,EAAIG,OAAO,WAAY,CALtBL,WAAIQ,EACHb,WAAaY,QAIQE,OAAvBC,QAAAhC","file":"packages.min.js","sourcesContent":["var express = require('express');\r\nvar router = express.Router();\r\nconst mongo = require(\"mongodb\").MongoClient;\r\n\r\n//const url = \"mongodb://localhost:27017\";\r\n//const url = \"mongodb+srv://mo:comon123@cluster0.c2uhk.mongodb.net/test?authSource=admin&replicaSet=atlas-rvxm88-shard-0&readPreference=primary&appname=MongoDB%20Compass&ssl=true\"\r\nconst uniqueValidator = require(\"mongoose-unique-validator\");\r\n\r\nfunction getPackages(pid, callback) {\r\n  mongo.connect(MONGO_URL, {  // Create the DB connection\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n  },\r\n    (err, client) => {  // The callback will be called if the connection was succeded\r\n      if (err) { throw err; }\r\n      const db = client.db(\"userdata\");  // get reference to the DB\r\n      const collection = db.collection(\"packages\"); // Get reference to the collection\r\n      const query = {}    // Empty query to get all data\r\n      if (pid) query.packid = parseInt(pid);  // If you need certain product\r\n      collection.find(query).toArray((err, items) => {\r\n        // console.log(query)\r\n        // if (err) { throw err; }\r\n        \r\n        // code goes here\r\n        // console.log(items)\r\n        callback(err, items)\r\n      });\r\n\r\n    }\r\n  );\r\n\r\n}\r\n\r\n// const packages = [\r\n//   id\r\n\r\n// packid:\r\n// \"1\"\r\n// packname\r\n// :\r\n// \"Malvdives Selight\"\r\n// imgpath\r\n// :\r\n// \"/images/cub-1.jpg\"\r\n// packprice\r\n// :\r\n// \"$4000\"\r\n\r\n\r\n/* GET all packages listing. */\r\nrouter.get('/', function (req, res, next) {\r\n  // Read the packages list from the DB\r\n  getPackages(null, // null => get all packages\r\n    function (err, packdata) { // Callback function, will be called when the data from the DB is ready\r\n      if (err) throw err\r\n      // Render the PUG template with the product data we got from the DB\r\n      res.render('packages', {\r\n        mypackages: packdata\r\n      });\r\n    }\r\n  );\r\n});\r\n\r\n/* GET one product listing. */\r\nrouter.get('/details/:packid', function (req, res, next) {\r\n  const packid = req.params.packid\r\n  getPackages(packid,\r\n    function (err, data) {\r\n      if (err) throw err\r\n      res.render('packages', {\r\n        mypackages: data,\r\n        isdetails: true\r\n      });\r\n    }\r\n  );\r\n});\r\n\r\nmodule.exports = router;\r\n"]}