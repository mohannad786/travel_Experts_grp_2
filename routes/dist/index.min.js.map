{"version":3,"sources":["index.js"],"names":["express","require","router","Router","MongoClient","uniqueValidator","Booking1","Packages","pid","mongo","connect","process","env","MONGO_URL","useNewUrlParser","err","client","myarray","getPackages","db","callback","query","packid","toArray","items","collection","find","req","next","packdata","floor","Math","random","length","greetings","greet","console","log","res","render","mypackages","greet_msg","get","Date","params","packageid","date_time","data","isdetails","post","body","booking1","userId","packageId","TravellerCount","save","processErrors","redirect","populate","exec","findOneAndDelete","_id","bookingid"],"mappings":"aAAA,IAAIA,QAAUC,QAAQ,WAClBC,OAASF,QAAQG,SADjBH,MAAUC,QAAQ,WAAtBG,YAGMC,gBAAkBJ,QAAQ,sCAFXE,QAArB,sBAAID,kBAAAA,mBAIiBD,QAAQ,sBAArBK,mBAAAA,SAFFD,QAAAA,CAAAA,+BAA0B,oBAAhC,kBAAA,kCAQA,SAPQE,YAOaC,EAPbD,GAQNE,MAAMC,QAAQC,QAAQC,IAAIC,UAAW,CACnCC,iBARiBb,EAAbK,oBASgB,GAEpB,SAACS,EAAKC,GARNC,GAAAA,EAAW,MAAAF,EAUT,IAPGG,EAOQF,EAAOG,GAAG,YAPDC,WAAU,YAC5BV,EAAQC,GAA0BH,IAAAa,EAAAC,OAAAd,GACtCM,EAAAA,KAAiBO,GADkBE,QAAA,SAAAR,EAAAS,GAKVJ,EAAAL,EAAAS,OAKvBC,OAAAA,IAAAA,IAAWC,SAAXC,EAAuBJ,EAAQK,GAE7BV,YAAA,KAEA,SAAAH,EAAAc,GACA,GAAAd,EAAA,MAAAA,EACAK,IAAAA,EAAcI,KAANM,MAARC,KAAAC,SAAAf,QAAAgB,QANFC,EAAAjB,QAAAkB,GAVJC,QAAAC,IAAApB,QAAAkB,IAwBFG,EAAAC,OAAA,QAAA,CAYQC,WAAYX,EACZY,UAAY,iCAAiCP,EAX9CQ,WAAS,IAAAC,MAAeL,iBAOzBF,OAAAA,IAAO,0BACP,SAAAT,EAAAW,EAAAV,GACCU,YAYUX,EAAIiB,OAAOC,UAXpBL,SAAAA,EAAYX,GAEZiB,GAAAA,EAAS,MAAOH,EAHjBL,EAAAC,OAAA,MAAA,CAPLC,WAAAO,EAFFC,WAAA,QAyCA9C,OAAA+C,KAAA,QAAA,SAAAtB,EAAAW,EAAAV,GACAD,EAAAuB,KAAA,IACAC,EAAA,IAAA7C,SACA6C,EAAAC,OAAA,EAEAD,EAAAE,UAAA1B,EAAAuB,KAAAG,UAMEF,EAASG,eAAiB3B,EAAIuB,KAAKI,eAJnCH,EAAUI,KAAM,SAAhBxC,GACA,GAAMoC,EAAAA,OAAWK,cAAjBzC,EAAA,MAAAY,EAAAW,EAAAX,EAAAuB,MACAC,EAAAA,SAAA,cAMEb,OAAGI,IAACe,SAAS,SAAb9B,EAAAW,EAAAV,GACDtB,SAHDoB,KAAA,CAAA0B,OAAA,IAPFM,SAAA,aAaAC,KAAA,SAAA5C,EAAAoC,GAKUpC,GAAKqB,QAAQC,IAAItB,GAJrBuB,EAANC,OAAW,QAAU,CAAAY,SAAAA,QAKfb,OAAGI,IAACH,qBAAgB,SAAAZ,EAAAW,EAAAV,GAAEuB,IAAAA,EAAAA,EAAAA,OAAAA,UAAF7C,SAApBsD,iBAAA,CAAAC,IAAAC,GAAA,SAAA/C,GAJJA,GAAAqB,QAAAC,IAAAtB,GAQFuB,EAAAmB,SAAA,SAGEnD,OAAAA,QAASsD","file":"index.min.js","sourcesContent":["var express = require('express');\nvar router = express.Router();\nconst mongo = require(\"mongodb\").MongoClient;\nconst uniqueValidator = require(\"mongoose-unique-validator\");\nconst { Packages } = require(\"../models/packages\");\nconst { Booking1 } = require(\"../models/booking1\");\n\n// Generate random Greeting Program\nvar myarray = ['ready for some exciting time', 'how are you today', 'good to see you', 'hope you are having a good day']\n\n\nfunction getPackages(pid, callback) {\n  mongo.connect(process.env.MONGO_URL, {  // Create the DB connection\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  },\n    (err, client) => {  // The callback will be called if the connection was succeded\n      if (err) { throw err; }\n      const db = client.db(\"userdata\");  // get reference to the DB\n      const collection = db.collection(\"packages\"); // Get reference to the collection\n      const query = {}    // Empty query to get all data\n      if (pid) query.packid = (pid);  // If you need certain product\n      collection.find(query).toArray((err, items) => {\n        // console.log(query)\n        // if (err) { throw err; }\n        \n        // code goes here\n        // console.log(items)\n        callback(err, items)\n      });\n\n    }\n  );\n  }\n\n\n/* GET all packages listing. */\n\nrouter.get('/', function (req, res, next) {\n  // Read the packages list from the DB\n  getPackages(null, // null => get all packages\n    function (err, packdata) { // Callback function, will be called when the data from the DB is ready\n      if (err) throw err\n      const greet = Math.floor(Math.random() * myarray.length);\n      var greetings = myarray[greet];\n      console.log(myarray[greet]);\n      // Render the PUG template with the product data we got from the DB\n       res.render('index', {\n        mypackages: packdata,\n        greet_msg: ('Welcome to our travel Portal, '+greetings ),\n        date_time: (new Date()).toString(),\n      });\n    }\n  );\n});\n\n/* GET one product listing. */\n\nrouter.get('/details/det/:packageid', function (req, res, next) {\n  const packid = req.params.packageid\n   getPackages(packid,\n    function (err, data) {\n \n      if (err) throw err\n      res.render('det', {\n        mypackages: data,\n        isdetails: true,  \n      });\n    }\n  );\n});\n\n//middleware that is specific to this router,\n//checks that the user must be logged in\n// router.use((req, res, next) => {\n//   console.log('Time: ', Date.now());\n//   if (!req.user){ \n//     req.session.msg=\"Please login before booking\";\n//      res.status(403).redirect(\"/\");\n//   }\n//   //else if (req.user.role != \"agent\") res.status(403).redirect(\"/\");\n//   else next();\n// });\n\n// load booking data\nrouter.post(\"/book\", function (req, res, next) {\n  const data = req.body;\n  const booking1 = new Booking1();\n  booking1.userId = 3;\n  booking1.packageId = req.body.packageId;\n  booking1.TravellerCount = req.body.TravellerCount;\n  \n  booking1.save(function (err) {\n    if (err) return processErrors(err, \"det\", req, res, req.body);\n    res.redirect(\"/book1\");\n  });\n});\n\n/* GET the booking page. */\nrouter.get(\"/book1\", function (req, res, next) {\n  Booking1.find({ userId:3 })\n    .populate(\"packageId\")\n    .exec((err, booking1) => {\n      if (err) console.log(err);\n      res.render(\"book1\", { booking1 });\n    });\n});\n\n// Process the cancel booking\nrouter.get(\"/return/:bookingid\", function (req, res, next) {\n  const bookingid = req.params.bookingid;\n  Booking1.findOneAndDelete({ _id: bookingid }, (err) => {\n    if (err) console.log(err);\n    res.redirect(\"/\"); // Redirect to the purchases page\n  });\n});\n\nmodule.exports = router;\n\n\n\n"]}