{"version":3,"sources":["users.js"],"names":["express","require","router","Router","User","bcrypt","pageRegister","pagetitle","pageheading","pagemessage","hideLogin","user","password","hashedPassword","res","errorArray","Object","keys","errs","errors","forEach","processErrors","err","key","message","render","_objectSpread","req","headermessage","next","post","body","validateSync","hash","get","save","result","fname","redirect","module","exports"],"mappings":"wuBAAA,IAAIA,QAAUC,QAAQ,WAClBC,OAASF,QAAQG,kBACJF,QAAQ,kBAAjBG,cAAAA,KACFC,OAASJ,QAAQ,YAEjBK,aAAe,CACnBC,UAAW,UACXC,YAAa,uBAPfC,YAAcR,iEASZS,WAAW,GAuBTC,SAAKC,cAAWC,EAAAA,EAAhBC,GAEAH,IAAII,EAAM,GAGP,OAFQC,OAAAC,KAAAC,EAAAC,QACPC,QAAOC,SAAAA,GAAAA,OAAcC,EAAUR,KAA/BI,EAAAC,OAAAI,GAAAC,WAEFV,EAAAW,OAAA,UAAAC,cAAA,GAaCpB,aAbD,CAcFa,OAAQJ,GAbNY,EAAMC,OAjCVrB,OAAAA,IAAS,IAAE,SADQoB,EAAAb,EAAAe,GAEnBrB,EAAAA,OAAW,WAAEF,gBAFMJ,OAMrB4B,KAAA,IAAA,SAAAH,EAAAb,EAAAe,GAEA,IAAAlB,EAAA,IAAAP,KAAAuB,EAAAI,MACAb,EAAAP,EAAAqB,eACA,GAAAd,EAYI,OAAOG,cAAcH,EAAMS,EAAKb,GAElCT,OAAO4B,KAAKN,EAAII,KAAKnB,SAAU,GAAI,SAACU,EAAKT,GAX3CX,GAAOgC,EAAI,MAAKZ,EAAhBX,EAAAC,SAAAC,EAKEF,EAAAwB,KAAA,SAAAb,EAAAc,GACMzB,GAAIW,EACJJ,OAAOP,cAAKqB,EAAgBL,EAAAb,GAEhC,IAAOO,EAAcH,mBAAAA,OAArBkB,EAAAC,OACDvB,EAAAwB,SAAA,mBAAAV,SAeFW,OArBDC,QAAAtC","file":"users.min.js","sourcesContent":["var express = require(\"express\");\nvar router = express.Router();\nconst { User } = require(\"../models/user\");\nconst bcrypt = require(\"bcryptjs\");\n\nconst pageRegister = {\n  pagetitle: \"Sign-Up\",\n  pageheading: \"Create a new account\",\n  pagemessage: \"Please enter the required information to create a new account.\",\n  hideLogin: true,\n};\n// const pageShowPosts = {\n//   pagetitle: \"Blog posts\",\n//   pageheading: \"List all posts\",\n//   pagemessage: \"These are all postets.\",\n// };\n\n/* Sign-up page. */\nrouter.get(\"/\", function (req, res, next) {\n  res.render(\"/sign-up\", pageRegister);\n});\n\nrouter.post(\"/\", function (req, res, next) {\n  // Create a new user object from the User Model\n  const user = new User(req.body);\n  const errs = user.validateSync(); // Run the model validation\n  if (errs) {\n    return processErrors(errs, req, res);\n  }\n  bcrypt.hash(req.body.password, 10, (err, hashedPassword) => {\n    if (err) throw err;\n    // Replace the plain password with the hashed password\n    user.password = hashedPassword;\n    // Store the use object in the DB\n    user.save((err, result) => {\n      if (err) {\n        return processErrors(err, req, res);\n      }\n      //console.log(result);\n      const headermessage = `Account created ${result.fname}`;\n      res.redirect(\"/?headermessage=\" + headermessage);\n    });\n  });\n});\n\nfunction processErrors(errs, req, res) {\n  // If there are errors from the Model schema\n  const errorArray = [];\n  const errorKeys = Object.keys(errs.errors);\n  errorKeys.forEach((key) => errorArray.push(errs.errors[key].message));\n  return res.render(\"sign-up\", {\n    ...pageRegister,\n    errors: errorArray,\n    ...req.body,\n  });\n}\n\nmodule.exports = router;\n"]}