{"version":3,"sources":["sign-up.js"],"names":["express","router","require","Router","Post","User","pagetitle","pageheading","pagemessage","hideLogin","processErrors","errs","req","res","errorArray","Object","keys","result","errors","err","key","push","message","render","_objectSpread","pageRegister","body","next","user","validateSync","bcrypt","hash","password","hashedPassword","post","headermessage","concat","fname","redirect","module","exports"],"mappings":"wuBAAA,IAKIA,QAJAC,QADAD,QAAUE,QAAQ,YACDC,SACfC,KAAOF,QAAQ,kBAAkBE,eAInCH,QADAD,QAAUE,QAAQ,YACDC,SACJD,QAAQ,mBAAjBG,cAAAA,KAPJL,OAAUE,QAAQ,YAClBD,aAAiBE,CAUnBG,UAAW,UATbC,YAAaL,uBAWXM,YAAa,iEARfC,WAAW,GA6CX,SAASC,cAAcC,EAAMC,EAAKC,GAEhC,IAAMC,EAAa,GAXb,OAFMC,OAAAC,KAAMC,EAAWC,QACrBC,QAAK,SAAAC,GAAA,OAAAN,EAAAO,KAAAV,EAAAO,OAAAE,GAAAE,WACPT,EAAAU,OAAOb,UAAPc,cAAA,GAFuBC,aAEvB,CAgBJP,OAAQJ,GACLF,EAAIc,OAhDXzB,OAAMwB,IAAAA,IAAY,SAAGb,EAAAC,EAAAc,GACnBrB,EAAAA,OAAW,WADQmB,gBAInBhB,OAAAA,KAAS,IAAE,SAAAG,EAAAC,EAAAc,GAGb,IAAAC,EAAA,IAAAvB,KAAAO,EAAAc,MACAf,EAAAiB,EAAAC,eACA,GAAAlB,EACA,OAAAD,cAAAC,EAAAC,EAAAC,GAEAiB,OAAAC,KAAAnB,EAAAc,KAAAM,SAAA,GAAA,SAAAb,EAAAc,GAaI,GAAId,EAAK,MAAMA,EAXjBN,EAAIU,SAAOU,EAGbhC,EAAOiC,KAAK,SAAZf,EAAiBF,GACf,GAAAE,EACMS,OAAOlB,cAAagB,EAA1Bd,EAAAC,GAEIF,IAAMwB,EAAA,mBAAAC,OAAAnB,EAAAoB,OACRxB,EAAAyB,SAAO5B,mBAAPyB,SAeDI,OAbDC,QAAAvC","file":"sign-up.min.js","sourcesContent":["var express = require('express');\r\nvar router = express.Router();\r\nconst Post = require('../models/user').Post;\r\n\r\n\r\nvar express = require(\"express\");\r\nvar router = express.Router();\r\nconst { User } = require(\"../models/user\");\r\nconst bcrypt = require(\"bcryptjs\");\r\n\r\nconst pageRegister = {\r\n  pagetitle: \"Sign-Up\",\r\n  pageheading: \"Create a new account\",\r\n  pagemessage: \"Please enter the required information to create a new account.\",\r\n  hideLogin: true,\r\n};\r\n// const pageShowPosts = {\r\n//   pagetitle: \"Blog posts\",\r\n//   pageheading: \"List all posts\",\r\n//   pagemessage: \"These are all postets.\",\r\n// };\r\n\r\n/* Sign-up page. */\r\nrouter.get(\"/\", function (req, res, next) {\r\n  res.render(\"/sign-up\", pageRegister);\r\n});\r\n\r\nrouter.post(\"/\", function (req, res, next) {\r\n  // Create a new user object from the User Model\r\n  const user = new User(req.body);\r\n  const errs = user.validateSync(); // Run the model validation\r\n  if (errs) {\r\n    return processErrors(errs, req, res);\r\n  }\r\n  bcrypt.hash(req.body.password, 10, (err, hashedPassword) => {\r\n    if (err) throw err;\r\n    // Replace the plain password with the hashed password\r\n    user.password = hashedPassword;\r\n    // Store the use object in the DB\r\n    user.save((err, result) => {\r\n      if (err) {\r\n        return processErrors(err, req, res);\r\n      }\r\n      //console.log(result);\r\n      const headermessage = `Account created ${result.fname}`;\r\n      res.redirect(\"/?headermessage=\" + headermessage);\r\n    });\r\n  });\r\n});\r\n\r\nfunction processErrors(errs, req, res) {\r\n  // If there are errors from the Model schema\r\n  const errorArray = [];\r\n  const errorKeys = Object.keys(errs.errors);\r\n  errorKeys.forEach((key) => errorArray.push(errs.errors[key].message));\r\n  return res.render(\"sign-up\", {\r\n    ...pageRegister,\r\n    errors: errorArray,\r\n    ...req.body,\r\n  });\r\n}\r\n\r\nmodule.exports = router;"]}