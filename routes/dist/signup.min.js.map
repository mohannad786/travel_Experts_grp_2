{"version":3,"sources":["signup.js"],"names":["express","require","router","Router","User","bcrypt","pageRegister","pagetitle","pageheading","pagemessage","hideLogin","processErrors","errs","req","res","errorArray","Object","keys","errors","console","result","push","key","message","headermessage","_objectSpread","body","next","post","user","render","validateSync","hash","password","err","hashedPassword","save","log","module","exports"],"mappings":"wuBAAA,IAAIA,QAAUC,QAAQ,WAClBC,OAASF,QAAQG,kBACJF,QAAQ,kBAAjBG,cAAAA,KACFC,OAASJ,QAAQ,YAEjBK,aAAe,CACnBC,UAAW,UACXC,YAAa,uBAPfC,YAAcR,iEASZS,WAAW,GAgCP,SAAAC,cAASC,EAAAC,EAAAC,GAER,IAAAC,EAAA,GAED,OAScC,OAAOC,KAAKL,EAAKM,QAV/BC,QAAYC,SAAAA,GAAAA,OAAZL,EAAAM,KAAAT,EAAAM,OAAAI,GAAAC,WACAT,EAAMU,OAAAA,SAANC,cAAA,GACAX,aADA,CAEDI,OAPDH,GALFF,EAAAa,OA7BAnB,OAAAA,IAAS,IAAE,SADQM,EAAAC,EAAAa,GAEnBnB,EAAAA,OAAW,SAAEF,gBAQfJ,OAAA0B,KAAA,IAAA,SAAAf,EAAAC,EAAAa,GAcE,IAAME,EAAO,IAAIzB,KAAKS,EAAIa,MAVrBI,EAAOD,EAAAE,eADb,GAGDnB,EACA,OAAAD,cAAAC,EAAAC,EAAAC,GAaET,OAAO2B,KAAKnB,EAAIa,KAAKO,SAAU,GAAI,SAACC,EAAKC,GAT3CjC,GAAO0B,EAAK,MAAKM,EAGfL,EAAMA,SAAWzB,EAWfyB,EAAKO,KAAK,SAACF,EAAKd,GARdR,GAAJsB,EACE,OAAOvB,cAAauB,EAAArB,EAAAC,GAWlBK,QAAQkB,IAAIjB,GAThBf,IAAO2B,EAAcC,mBAAAA,OAAeC,EAAKC,OACvCrB,EAAIoB,SAAWA,mBACfV,SAeFc,OAAAC,QAAArC","file":"signup.min.js","sourcesContent":["var express = require(\"express\");\r\nvar router = express.Router();\r\nconst { User } = require(\"../models/user\");\r\nconst bcrypt = require(\"bcryptjs\");\r\n\r\nconst pageRegister = {\r\n  pagetitle: \"Sign-up\",\r\n  pageheading: \"Create a new account\",\r\n  pagemessage: \"Please enter the required information to create a new account.\",\r\n  hideLogin: true,\r\n};\r\n// const pageShowUsers = {\r\n//   pagetitle: \"Blog users\",\r\n//   pageheading: \"List all users\",\r\n//   pagemessage: \"These are all userets.\",\r\n// };\r\n\r\n/* Sign-up page. */\r\n router.get(\"/\", function (req, res, next) {\r\n   res.render(\"signup\", pageRegister);\r\n });\r\n//router.get(\"/signup\", function (req, res, next) {\r\n//  res.render(\"signup/login\");\r\n//});\r\n\r\n\r\nrouter.post(\"/\", function (req, res, next) {\r\n  // Create a new user object from the User Model\r\n  \r\n  const user = new User(req.body);\r\n  \r\n  const errs = user.validateSync(); // Run the model validation\r\n  if (errs) {\r\n    return processErrors(errs, req, res);\r\n  }\r\n  bcrypt.hash(req.body.password, 10, (err, hashedPassword) => {\r\n    if (err) throw err;\r\n    // Replace the plain password with the hashed password\r\n    user.password = hashedPassword;\r\n    // Store the use object in the DB\r\n    user.save((err, result) => {\r\n      if (err) {\r\n        return processErrors(err, req, res);\r\n      }\r\n      console.log(result);\r\n      const headermessage = `Account created ${result.fname}`;\r\n      res.redirect(\"/?headermessage=\" + headermessage);\r\n    });\r\n  });\r\n});\r\n\r\nfunction processErrors(errs, req, res) {\r\n  // If there are errors from the Model schema\r\n  const errorArray = [];\r\n  const errorKeys = Object.keys(errs.errors);\r\n  errorKeys.forEach((key) => errorArray.push(errs.errors[key].message));\r\n  return res.render(\"signup\", {\r\n    ...pageRegister,\r\n    errors: errorArray,\r\n    ...req.body,\r\n  });\r\n}\r\n\r\nmodule.exports = router;"]}