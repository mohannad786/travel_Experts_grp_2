{"version":3,"sources":["index.js"],"names":["express","require","router","Router","mongo","MongoClient","uniqueValidator","getPackages","pid","callback","connect","process","env","MONGO_URL","useNewUrlParser","useUnifiedTopology","err","client","db","collection","query","packid","parseInt","find","toArray","items","get","req","res","next","packdata","render","mypackages","params","packageid","console","log","data","isdetails","module","exports"],"mappings":";;AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAb;;AACA,IAAMC,KAAK,GAAGH,OAAO,CAAC,SAAD,CAAP,CAAmBI,WAAjC;;AACA,IAAMC,eAAe,GAAGL,OAAO,CAAC,2BAAD,CAA/B;;AAGA,SAASM,WAAT,CAAqBC,GAArB,EAA0BC,QAA1B,EAAoC;AAClCL,EAAAA,KAAK,CAACM,OAAN,CAAcC,OAAO,CAACC,GAAR,CAAYC,SAA1B,EAAqC;AAAG;AACtCC,IAAAA,eAAe,EAAE,IADkB;AAEnCC,IAAAA,kBAAkB,EAAE;AAFe,GAArC,EAIE,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAAG;AAClB,QAAID,GAAJ,EAAS;AAAE,YAAMA,GAAN;AAAY;;AACvB,QAAME,EAAE,GAAGD,MAAM,CAACC,EAAP,CAAU,UAAV,CAAX,CAFe,CAEoB;;AACnC,QAAMC,UAAU,GAAGD,EAAE,CAACC,UAAH,CAAc,UAAd,CAAnB,CAHe,CAG+B;;AAC9C,QAAMC,KAAK,GAAG,EAAd,CAJe,CAIK;;AACpB,QAAIZ,GAAJ,EAASY,KAAK,CAACC,MAAN,GAAeC,QAAQ,CAACd,GAAD,CAAvB,CALM,CAKyB;;AACxCW,IAAAA,UAAU,CAACI,IAAX,CAAgBH,KAAhB,EAAuBI,OAAvB,CAA+B,UAACR,GAAD,EAAMS,KAAN,EAAgB;AAC7C;AACA;AAEA;AACA;AACAhB,MAAAA,QAAQ,CAACO,GAAD,EAAMS,KAAN,CAAR;AACD,KAPD;AASD,GAnBH;AAqBC;AACH;;;AAEAvB,MAAM,CAACwB,GAAP,CAAW,GAAX,EAAgB,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACxC;AACAtB,EAAAA,WAAW,CAAC,IAAD,EAAO;AAChB,YAAUS,GAAV,EAAec,QAAf,EAAyB;AAAE;AACzB,QAAId,GAAJ,EAAS,MAAMA,GAAN,CADc,CAEvB;;AACCY,IAAAA,GAAG,CAACG,MAAJ,CAAW,OAAX,EAAoB;AACnBC,MAAAA,UAAU,EAAEF;AADO,KAApB;AAGF,GAPQ,CAAX;AASD,CAXD;AAaA;;AACA5B,MAAM,CAACwB,GAAP,CAAW,aAAX,EAA0B,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAClD,MAAMR,MAAM,GAAGM,GAAG,CAACM,MAAJ,CAAWC,SAA1B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYf,MAAZ;AACAd,EAAAA,WAAW,CAACc,MAAD,EACT,UAAUL,GAAV,EAAeqB,IAAf,EAAqB;AACnB,QAAIrB,GAAJ,EAAS,MAAMA,GAAN;AACTY,IAAAA,GAAG,CAACG,MAAJ,CAAW,OAAX,EAAoB;AAClBC,MAAAA,UAAU,EAAEK,IADM;AAElBC,MAAAA,SAAS,EAAE;AAFO,KAApB;AAKD,GARQ,CAAX;AAUD,CAbD,E,CAgBA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGAC,MAAM,CAACC,OAAP,GAAiBtC,MAAjB","sourcesContent":["var express = require('express');\nvar router = express.Router();\nconst mongo = require(\"mongodb\").MongoClient;\nconst uniqueValidator = require(\"mongoose-unique-validator\");\n\n\nfunction getPackages(pid, callback) {\n  mongo.connect(process.env.MONGO_URL, {  // Create the DB connection\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  },\n    (err, client) => {  // The callback will be called if the connection was succeded\n      if (err) { throw err; }\n      const db = client.db(\"userdata\");  // get reference to the DB\n      const collection = db.collection(\"packages\"); // Get reference to the collection\n      const query = {}    // Empty query to get all data\n      if (pid) query.packid = parseInt(pid);  // If you need certain product\n      collection.find(query).toArray((err, items) => {\n        // console.log(query)\n        // if (err) { throw err; }\n        \n        // code goes here\n        // console.log(items)\n        callback(err, items)\n      });\n\n    }\n  );\n  }\n/* GET all packages listing. */\n\nrouter.get('/', function (req, res, next) {\n  // Read the packages list from the DB\n  getPackages(null, // null => get all packages\n    function (err, packdata) { // Callback function, will be called when the data from the DB is ready\n      if (err) throw err\n      // Render the PUG template with the product data we got from the DB\n       res.render('index', {\n        mypackages: packdata\n      });\n    }\n  );\n});\n\n/* GET one product listing. */\nrouter.get('/:packageid', function (req, res, next) {\n  const packid = req.params.packageid\n  console.log(packid);\n  getPackages(packid,\n    function (err, data) {\n      if (err) throw err\n      res.render('index', {\n        mypackages: data,\n        isdetails: true,\n        \n      });\n    }\n  );\n});\n\n\n// // Generate random Greeting Program\n// var myarray = ['ready for some exciting time', 'how are you today', 'good to see you', 'hope you are having a good day']\n// const greet = Math.floor(Math.random() * myarray.length);\n// var greetings = myarray[greet];\n// console.log(myarray[greet]);\n\n  \n// // /* GET home page and display greeting message */\n// // router.get('/', function(req, res, next) {\n// //   res.render('index', { \n// //     greet_msg: ('Welcome to our travel Portal,'+greetings ),\n// //     date_time: (new Date()).toString(),\n// //   });\n// // });\n\n\nmodule.exports = router;\n\n\n\n"],"file":"index.dev.js"}