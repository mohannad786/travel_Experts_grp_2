{"version":3,"sources":["contact1.js"],"names":["mongoose","require","connect","process","env","MONGO_URL","mongoDBurl","useNewUrlParser","useUnifiedTopology","connection","db","on","bind","console","postSchema","Schema","firstname","type","String","required","trim","validate","validator","v","length","message","lastname","email","test","props","concat","value","role","default","plugin","uniqueValidator","module","exports","Post","model","userSchema"],"mappings":"aACA,IAAAA,SAAAC,QAAA,YACID,gBAAmBC,QAAA,6BAIvBD,SAASE,QAAQC,QAAQC,IAAIC,WAAaC,WAAY,CACpDC,iBAAiB,EADnBP,oBAAiBG,IAEfK,IAAAA,GAAAA,SAAkBC,WAEpBC,GAAAC,GAAQ,QAAGX,QAASS,MAESG,KAD7BC,QAAA,sBAIA,IAAMC,WAAa,IAAId,SAASe,OAAO,CACnCC,UAAW,CACHC,KAAEC,OACNC,SAAU,yBACNC,MAHG,EAIPC,SAAU,CACRC,UAAW,SAAAC,GACT,OAAA,EAASC,EAAAA,QAEXC,QAAS,WAAA,MAAA,kDAToBC,SAAA,CAajCA,KAAUR,OACJC,SADI,yBAERA,MAAU,EACNE,SAHI,CAIRA,UAAU,SAAAE,GACRD,OAAW,EAAAC,EAAAC,QADHC,QAAA,WAAA,MAAA,kDAICE,MAAA,CAJDV,KAAAC,OAjBqBE,MAAA,EAwB1BC,SAAA,CACCH,UADD,SAAAK,GAEC,MAFD,4JAAAK,KAAAL,IAIHD,QAAW,SAAAO,GAAA,MAAA,GAAAC,OAAAD,EAAaE,MAAb,qCAGXN,SAAS,CAAAR,KAAAC,OAAAC,SAAA,0BAJAC,MAAA,EA3BoBC,SAAA,CAkCzBC,UAAE,SAAAC,GACFL,MADE,gEAAAU,KAEEL,IAGRD,QAAW,WAAA,MAAA,0GAKFU,KAAA,CAAAf,KAAAC,OANDE,MAAA,EAtCqBa,QAAA,cAmD/BnB,WAAAoB,OAASC,iBAnDsBC,OAAvCC,QAAAC,KAAAtC,SAAAuC,MAAA,OAAAC","file":"contact1.min.js","sourcesContent":["\r\n// Using Node.js `require()`\r\nvar mongoose = require(\"mongoose\");\r\nconst uniqueValidator = require(\"mongoose-unique-validator\");\r\n//var mongoDBurl = \"mongodb://localhost:27017/blog\";\r\n\r\nmongoose.connect(process.env.MONGO_URL || mongoDBurl, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n});\r\nconst db = mongoose.connection;\r\n/// To log the Mongoose erros to the console directly\r\ndb.on(\"error\", console.error.bind(console, \"connection error:\"));\r\n\r\n\r\nconst postSchema = new mongoose.Schema({\r\n    firstname: {\r\n        type: String,\r\n        required: \"First name is required\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return v.length > 3;\r\n          },\r\n          message: (props) => `Please ensure you have entered your comment.`,\r\n        },\r\n      },    \r\n      \r\n      lastname: {\r\n        type: String,\r\n        required: \"First name is required\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return v.length > 3;\r\n          },\r\n          message: (props) => `Please ensure you have entered your comment.`,\r\n        },\r\n      },    \r\n      email: {\r\n        type: String,\r\n        trim: true,\r\n         validate: {\r\n          validator: function (v) {\r\n            return /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(v);\r\n          },\r\n          message: (props) => `${props.value} is not a valid Email address.`,\r\n        },\r\n      },\r\n      password: {\r\n        type: String,\r\n        required: \"Please enter a password\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return /(?=(.*[0-9]))((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.{6,}$/.test(\r\n              v\r\n            );\r\n          },\r\n          message: (props) =>\r\n            `Password should have 1 lowercase letter, 1 uppercase letter, 1 number, and be at least 6 characters.`,\r\n        },\r\n      }, // more fields defined below\r\n      role: {\r\n        type: String,\r\n        trim: true,\r\n        default: \"customer\",\r\n      },\r\n\r\n\r\n});\r\npostSchema.plugin(uniqueValidator);\r\n\r\nmodule.exports.Post = mongoose.model('Post', userSchema);"]}