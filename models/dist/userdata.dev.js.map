{"version":3,"sources":["userdata.js"],"names":["uniqueValidator","require","postSchema","mongoose","Schema","firstname","type","String","required","trim","validate","validator","v","length","message","props","lastname","email","test","value","comment","password","role","plugin","module","exports","Post","model","userSchema"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,IAAMA,eAAe,GAAGC,OAAO,CAAC,2BAAD,CAA/B;;AAEA,IAAMC,UAAU,GAAG,IAAIC,QAAQ,CAACC,MAAb,CAAoB;AACnCC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE,wBAFH;AAGPC,IAAAA,IAAI,EAAE,IAHC;AAIPC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAOA,CAAC,CAACC,MAAF,GAAW,CAAlB;AACD,OAHO;AAIRC,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA;AAAA;AAJD;AAJH,GADwB;AAajCC,EAAAA,QAAQ,EAAE;AACRV,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,wBAFF;AAGRC,IAAAA,IAAI,EAAE,IAHE;AAIRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAOA,CAAC,CAACC,MAAF,GAAW,CAAlB;AACD,OAHO;AAIRC,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA;AAAA;AAJD;AAJF,GAbuB;AAwBjCE,EAAAA,KAAK,EAAE;AACLX,IAAAA,IAAI,EAAEC,MADD;AAELE,IAAAA,IAAI,EAAE,IAFD;AAGJC,IAAAA,QAAQ,EAAE;AACTC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAO,4JAA4JM,IAA5J,CAAiKN,CAAjK,CAAP;AACD,OAHQ;AAITE,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA,yBAAcA,KAAK,CAACI,KAApB;AAAA;AAJA;AAHN,GAxB0B;AAkCjCC,EAAAA,OAAO,EAAE;AACPd,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE,8BAFH;AAGPC,IAAAA,IAAI,EAAE,IAHC;AAIPC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAOA,CAAC,CAACC,MAAF,GAAW,CAAlB;AACD,OAHO;AAIRC,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA;AAAA;AAJD;AAJH,GAlCwB;AA6CjCM,EAAAA,QAAQ,EAAE;AACRf,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,yBAFF;AAGRC,IAAAA,IAAI,EAAE,IAHE;AAIRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAO,gEAAgEM,IAAhE,CACLN,CADK,CAAP;AAGD,OALO;AAMRE,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA;AAAA;AAND;AAJF,GA7CuB;AA0D9B;AACHO,EAAAA,IAAI,EAAE;AACJhB,IAAAA,IAAI,EAAEC,MADF;AAEJE,IAAAA,IAAI,EAAE,IAFF;AAGJ,eAAS;AAHL;AA3D2B,CAApB,CAAnB;AAmEAP,UAAU,CAACqB,MAAX,CAAkBvB,eAAlB;AAEAwB,MAAM,CAACC,OAAP,CAAeC,IAAf,GAAsBvB,QAAQ,CAACwB,KAAT,CAAe,MAAf,EAAuBC,UAAvB,CAAtB","sourcesContent":["\r\n// Require the mongoose module\r\n// var mongoose = require('mongoose');\r\n// Set up a mongoose connection\r\n// var mongoDB = \"mongodb+srv://mo:comon123@cluster0.c2uhk.mongodb.net/userdata?authSource=admin&replicaSet=atlas-rvxm88-shard-0&readPreference=primary&appname=MongoDB%20Compass&ssl=true\"\r\n// mongoose.connect(mongoDB, { useNewUrlParser: true, useUnifiedTopology: true });\r\n// Get the connection\r\n// var db = mongoose.connection;\r\n// Bind connection to error event (to get notification of connection errors)\r\n// db.on('error', console.error.bind(console, 'MongoDB connection error:'));\r\n\r\n// db.once('open', function () {\r\n//     console.log(\"we're connected!\")\r\n// });\r\n\r\nconst uniqueValidator = require(\"mongoose-unique-validator\");\r\n\r\nconst postSchema = new mongoose.Schema({\r\n    firstname: {\r\n        type: String,\r\n        required: \"First name is required\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return v.length > 3;\r\n          },\r\n          message: (props) => `Please ensure you have entered your comment.`,\r\n        },\r\n      },    \r\n      \r\n      lastname: {\r\n        type: String,\r\n        required: \"First name is required\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return v.length > 3;\r\n          },\r\n          message: (props) => `Please ensure you have entered your comment.`,\r\n        },\r\n      },    \r\n      email: {\r\n        type: String,\r\n        trim: true,\r\n         validate: {\r\n          validator: function (v) {\r\n            return /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(v);\r\n          },\r\n          message: (props) => `${props.value} is not a valid Email address.`,\r\n        },\r\n      },\r\n      comment: {\r\n        type: String,\r\n        required: \"Please write your post body.\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return v.length > 3;\r\n          },\r\n          message: (props) => `Please ensure you have entered your comment.`,\r\n        },\r\n      },       \r\n      password: {\r\n        type: String,\r\n        required: \"Please enter a password\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return /(?=(.*[0-9]))((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.{6,}$/.test(\r\n              v\r\n            );\r\n          },\r\n          message: (props) =>\r\n            `Password should have 1 lowercase letter, 1 uppercase letter, 1 number, and be at least 6 characters.`,\r\n        },\r\n      }, // more fields defined below\r\n      role: {\r\n        type: String,\r\n        trim: true,\r\n        default: \"customer\",\r\n      },\r\n\r\n\r\n});\r\npostSchema.plugin(uniqueValidator);\r\n\r\nmodule.exports.Post = mongoose.model('Post', userSchema);"],"file":"userdata.dev.js"}