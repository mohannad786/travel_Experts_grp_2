{"version":3,"sources":["user.js"],"names":["mongoose","require","uniqueValidator","Agent","Customer","connect","process","env","MONGO_URL","mongoDBurl","useNewUrlParser","useUnifiedTopology","db","connection","on","console","error","bind","once","log","userSchema","Schema","username","type","String","required","trim","unique","lowercase","fname","lname","email","validate","validator","v","test","message","props","value","password","role","customerId","Number","ref","agentId","plugin","module","exports","User","model"],"mappings":";;AAAA;AACA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMC,eAAe,GAAGD,OAAO,CAAC,2BAAD,CAA/B;;eACkBA,OAAO,CAAC,SAAD,C;IAAjBE,K,YAAAA,K;;gBACaF,OAAO,CAAC,YAAD,C;IAApBG,Q,aAAAA,Q;;AAERJ,QAAQ,CAACK,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,SAAZ,IAAyBC,UAA1C,EAAsD;AACpDC,EAAAA,eAAe,EAAE,IADmC;AAEpDC,EAAAA,kBAAkB,EAAE;AAFgC,CAAtD;AAIA,IAAMC,EAAE,GAAGZ,QAAQ,CAACa,UAApB,C,CACA;;AACAD,EAAE,CAACE,EAAH,CAAM,OAAN,EAAeC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,EAA4B,mBAA5B,CAAf;AAEAH,EAAE,CAACM,IAAH,CAAQ,MAAR,EAAgB,YAAY;AACxBH,EAAAA,OAAO,CAACI,GAAR,CAAY,kBAAZ;AACA,CAFJ;AAGA,IAAMC,UAAU,GAAG,IAAIpB,QAAQ,CAACqB,MAAb,CAAoB;AACrCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,sBAFF;AAGRC,IAAAA,IAAI,EAAE,IAHE;AAIRC,IAAAA,MAAM,EAAE,8BAJA;AAKRC,IAAAA,SAAS,EAAE;AALH,GAD2B;AAQrCC,EAAAA,KAAK,EAAE;AACLN,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,wBAFL;AAGLC,IAAAA,IAAI,EAAE;AAHD,GAR8B;AAarCI,EAAAA,KAAK,EAAE;AACLP,IAAAA,IAAI,EAAEC,MADD;AAELE,IAAAA,IAAI,EAAE;AAFD,GAb8B;AAiBrCK,EAAAA,KAAK,EAAE;AACLR,IAAAA,IAAI,EAAEC,MADD;AAELE,IAAAA,IAAI,EAAE,IAFD;AAGLM,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAO,sDAAsDC,IAAtD,CAA2DD,CAA3D,CAAP;AACD,OAHO;AAIRE,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA,yBAAcA,KAAK,CAACC,KAApB;AAAA;AAJD;AAHL,GAjB8B;AA2BrCC,EAAAA,QAAQ,EAAE;AACRhB,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,yBAFF;AAGRC,IAAAA,IAAI,EAAE,IAHE;AAIRM,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAO,gEAAgEC,IAAhE,CACLD,CADK,CAAP;AAGD,OALO;AAMRE,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA;AAAA;AAND;AAJF,GA3B2B;AAwClC;AACHG,EAAAA,IAAI,EAAE;AACJjB,IAAAA,IAAI,EAAEC,MADF;AAEJE,IAAAA,IAAI,EAAE,IAFF;AAGJ,eAAS;AAHL,GAzC+B;AA+CvCe,EAAAA,UAAU,EAAE;AAAElB,IAAAA,IAAI,EAAEmB,MAAR;AAAgBC,IAAAA,GAAG,EAAE,UAArB;AAAiC,eAAS;AAA1C,GA/C2B;AAgDvCC,EAAAA,OAAO,EAAE;AAAErB,IAAAA,IAAI,EAAEmB,MAAR;AAAgBC,IAAAA,GAAG,EAAE,OAArB;AAA8B,eAAS;AAAvC;AAhD8B,CAApB,CAAnB;AAoDAvB,UAAU,CAACyB,MAAX,CAAkB3C,eAAlB,E,CAEA;;AACA4C,MAAM,CAACC,OAAP,CAAeC,IAAf,GAAsBhD,QAAQ,CAACiD,KAAT,CAAe,MAAf,EAAuB7B,UAAvB,CAAtB","sourcesContent":["// // Create a model for User data for registeration\r\nconst mongoose = require(\"mongoose\");\r\nconst uniqueValidator = require(\"mongoose-unique-validator\");\r\nconst { Agent } = require(\"./agent\");\r\nconst { Customer } = require(\"./customer\");\r\n\r\nmongoose.connect(process.env.MONGO_URL || mongoDBurl, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n});\r\nconst db = mongoose.connection;\r\n/// To log the Mongoose erros to the console directly\r\ndb.on(\"error\", console.error.bind(console, \"connection error:\"));\r\n\r\ndb.once(\"open\", function () {\r\n    console.log(\"we're connected!\");\r\n   });\r\nconst userSchema = new mongoose.Schema({\r\n  username: {\r\n    type: String,\r\n    required: \"Username is required\",\r\n    trim: true,\r\n    unique: \"The username must be unique.\",\r\n    lowercase: true,\r\n  },\r\n  fname: {\r\n    type: String,\r\n    required: \"First name is required\",\r\n    trim: true,\r\n  },\r\n  lname: {\r\n    type: String,\r\n    trim: true,\r\n  },\r\n  email: {\r\n    type: String,\r\n    trim: true,\r\n    validate: {\r\n      validator: function (v) {\r\n        return /^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})*$/.test(v);\r\n      },\r\n      message: (props) => `${props.value} is not a valid Email address.`,\r\n    },\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: \"Please enter a password\",\r\n    trim: true,\r\n    validate: {\r\n      validator: function (v) {\r\n        return /(?=(.*[0-9]))((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.{6,}$/.test(\r\n          v\r\n        );\r\n      },\r\n      message: (props) =>\r\n        `Password should have 1 lowercase letter, 1 uppercase letter, 1 number, and be at least 6 characters.`,\r\n    },\r\n  }, // more fields defined below\r\n  role: {\r\n    type: String,\r\n    trim: true,\r\n    default: \"customer\",\r\n  },\r\n\r\ncustomerId: { type: Number, ref: \"Customer\", default: null },\r\nagentId: { type: Number, ref: \"Agent\", default: null },\r\n\r\n});\r\n\r\nuserSchema.plugin(uniqueValidator);\r\n\r\n// Create a model User using the userSchema\r\nmodule.exports.User = mongoose.model(\"User\", userSchema);\r\n"],"file":"user.dev.js"}