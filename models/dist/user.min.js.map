{"version":3,"sources":["user.js"],"names":["mongoose","require","uniqueValidator","Customer","connect","process","env","MONGO_URL","mongoDBurl","useNewUrlParser","useUnifiedTopology","Agent","db","on","console","error","bind","userSchema","connection","Schema","username","String","once","log","unique","type","required","trim","lname","fname","v","test","props","value","validator","message","validate","role","default","customerId","Number","ref","agentId","plugin","model"],"mappings":"aACA,IAAMA,SAAWC,QAAQ,YADzBC,gBAAAD,QAAA,sCACiBA,QAAQ,WAAnBD,eAAAA,gBAGeC,QAAQ,cAArBE,mBAAAA,SAERH,SAASI,QAAQC,QAAQC,IAAIC,WAAaC,WAAY,CACpDC,iBAJgBR,EAKhBS,oBALMC,IAOR,IAAMC,GAAKZ,SANUC,WAQrBW,GAAGC,GAAG,QAASC,QAAQC,MAAMC,KAAKF,QAAS,sBALzCL,GAAAA,KAAAA,OAAAA,WACAC,QAAAA,IAAAA,sBAEF,IAAQO,WAAYC,IAAAA,SACpBC,OAAA,CAOEC,SAAU,CANTP,KAAGQ,OAEHC,SAAH,uBACIR,MAAQS,EADZC,OAAA,+BAGMP,WAAU,GAEZQ,MAAI,CACJC,KAAAA,OACAC,SAHQ,yBAIRH,MAAM,GAJEI,MAD2B,CAQrCC,KAAOR,OACLI,MAAMJ,GAENM,MAAI,CAX+BF,KAAAJ,OAarCO,MAAO,EACLH,SAAMJ,CACNM,UAAM,SAAAG,GAf6B,MAAA,sDAAAC,KAAAD,IAkBnCL,QAAMJ,SADDW,GACCX,MAAAA,GAAAA,OADDW,EAAAC,MACCZ,qCAGJa,SAAAA,CACET,KAAAJ,OACDK,SAHO,0BAIRS,MAAAA,EAASC,SAAA,CAAAF,UAAA,SAAAJ,GAJD,MAAA,gEAAAC,KApByBD,IA6BnCJ,QAAU,WAAA,MAAA,0GAINW,KAAA,CAGDZ,KALOJ,OAMRc,MAAAA,EAASG,QAAA,YAVHC,WA3B2B,CAAAd,KAAAe,OAAAC,IAAA,WAAAH,QAAA,MAwClCI,QAAA,CAAAjB,KAAAe,OAAAC,IAAA,QAAAH,QAAA,QAIDrB,WAAA0B,OAASzC,iBAGCuB,OAAAA,QAAMe,KAARxC,SAAA4C,MAAA,OAAA3B","file":"user.min.js","sourcesContent":["// Using Node.js `require()`\r\nconst mongoose = require(\"mongoose\");\r\nconst uniqueValidator = require(\"mongoose-unique-validator\");\r\nconst { Agent } = require(\"./agent\");\r\nconst { Customer } = require(\"./customer\");\r\n\r\nmongoose.connect(process.env.MONGO_URL || mongoDBurl, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n});\r\nconst db = mongoose.connection;\r\n/// To log the Mongoose erros to the console directly\r\ndb.on(\"error\", console.error.bind(console, \"connection error:\"));\r\n\r\ndb.once(\"open\", function () {\r\n    console.log(\"we're connected!\");\r\n   });\r\nconst userSchema = new mongoose.Schema({\r\n  username: {\r\n    type: String,\r\n    required: \"Username is required\",\r\n    trim: true,\r\n    unique: \"The username must be unique.\",\r\n    lowercase: true,\r\n  },\r\n  fname: {\r\n    type: String,\r\n    required: \"First name is required\",\r\n    trim: true,\r\n  },\r\n  lname: {\r\n    type: String,\r\n    trim: true,\r\n  },\r\n  email: {\r\n    type: String,\r\n    trim: true,\r\n    validate: {\r\n      validator: function (v) {\r\n        return /^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})*$/.test(v);\r\n      },\r\n      message: (props) => `${props.value} is not a valid Email address.`,\r\n    },\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: \"Please enter a password\",\r\n    trim: true,\r\n    validate: {\r\n      validator: function (v) {\r\n        return /(?=(.*[0-9]))((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.{6,}$/.test(\r\n          v\r\n        );\r\n      },\r\n      message: (props) =>\r\n        `Password should have 1 lowercase letter, 1 uppercase letter, 1 number, and be at least 6 characters.`,\r\n    },\r\n  }, // more fields defined below\r\n  role: {\r\n    type: String,\r\n    trim: true,\r\n    default: \"customer\",\r\n  },\r\n\r\ncustomerId: { type: Number, ref: \"Customer\", default: null },\r\nagentId: { type: Number, ref: \"Agent\", default: null },\r\n\r\n});\r\n\r\nuserSchema.plugin(uniqueValidator);\r\n\r\n// Create a model User using the userSchema\r\nmodule.exports.User = mongoose.model(\"User\", userSchema);\r\n"]}