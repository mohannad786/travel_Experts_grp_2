{"version":3,"sources":["user.js"],"names":["mongoose","require","uniqueValidator","MONGO_URL","mongoDBurl","useNewUrlParser","useUnifiedTopology","connection","db","on","console","error","bind","once","log","Schema","username","userSchema","type","String","required","trim","lowercase","fname","lname","email","v","validate","test","message","props","concat","value","password","role","default","plugin"],"mappings":"aACA,IAAIA,SAAWC,QAAQ,YADvBC,gBAAAD,QAAA,6BAEAD,SAAME,QAAAA,QAAkBD,IAAOE,WAACC,WAAA,CAI9BC,iBAAiB,EACjBC,oBAAoB,IADpBD,IAAAA,GAAAA,SAAiBE,WADmCC,GAAtDC,GAAA,QAAAC,QAAAC,MAAAC,KAAAF,QAAA,sBAQAF,GAAGK,KAAK,OAAQ,WAFbJ,QAAGK,IAASJ,sBAGXA,IAAAA,WAAY,IAAAV,SAAZe,OAAA,CADJC,SAAA,CAGMC,KAAAA,OACJD,SAAU,uBACRE,MAAMC,EACNC,OAAQ,+BACRC,WAHQ,GAKRC,MAAAA,CANmCJ,KAAAC,OAQrCI,SAAO,yBACLL,MAAMC,GAENE,MAAI,CAX+BH,KAAAC,OAarCK,MAAO,GAELH,MAAI,CAf+BH,KAAAC,OAiBrCM,MAAO,EACLP,SAAMC,CACNE,UAFK,SAAAK,GAGLC,MAAU,sDAAAC,KAAAF,IAENG,QAAO,SAAAC,GAAA,MAAA,GAAAC,OAAAD,EAAAE,MAAA,qCAEAC,SAAA,CAAAf,KAAAC,OAJDC,SAAA,0BApByBC,MAAA,EA2BrCY,SAAU,CACRf,UADQ,SAAAQ,GAERN,MAAU,gEAFFQ,KAGFF,IAGFG,QAAO,WAAA,MAAA,0GAIAK,KAAA,CANDhB,KAAAC,OA/ByBE,MAAA,EAwClCc,QAAA,cAIDlB,WAAAmB,OAASlC,iBAIbe,OAAAA,QAAWmB,KAAOlC,SAAAA,MAElB,OAAAe","file":"user.min.js","sourcesContent":["// Using Node.js `require()`\r\nvar mongoose = require(\"mongoose\");\r\nconst uniqueValidator = require(\"mongoose-unique-validator\");\r\n//var mongoDBurl = \"mongodb://localhost:27017/blog\";\r\n\r\nmongoose.connect(process.env.MONGO_URL || mongoDBurl, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n});\r\nconst db = mongoose.connection;\r\n/// To log the Mongoose erros to the console directly\r\ndb.on(\"error\", console.error.bind(console, \"connection error:\"));\r\n\r\ndb.once(\"open\", function () {\r\n    console.log(\"we're connected!\");\r\n   });\r\nconst userSchema = new mongoose.Schema({\r\n  username: {\r\n    type: String,\r\n    required: \"Username is required\",\r\n    trim: true,\r\n    unique: \"The username must be unique.\",\r\n    lowercase: true,\r\n  },\r\n  fname: {\r\n    type: String,\r\n    required: \"First name is required\",\r\n    trim: true,\r\n  },\r\n  lname: {\r\n    type: String,\r\n    trim: true,\r\n  },\r\n  email: {\r\n    type: String,\r\n    trim: true,\r\n    validate: {\r\n      validator: function (v) {\r\n        return /^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})*$/.test(v);\r\n      },\r\n      message: (props) => `${props.value} is not a valid Email address.`,\r\n    },\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: \"Please enter a password\",\r\n    trim: true,\r\n    validate: {\r\n      validator: function (v) {\r\n        return /(?=(.*[0-9]))((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.{6,}$/.test(\r\n          v\r\n        );\r\n      },\r\n      message: (props) =>\r\n        `Password should have 1 lowercase letter, 1 uppercase letter, 1 number, and be at least 6 characters.`,\r\n    },\r\n  }, // more fields defined below\r\n  role: {\r\n    type: String,\r\n    trim: true,\r\n    default: \"customer\",\r\n  },\r\n});\r\n\r\nuserSchema.plugin(uniqueValidator);\r\n\r\n// Create a model User using the userSchema\r\nmodule.exports.User = mongoose.model(\"User\", userSchema);\r\n"]}