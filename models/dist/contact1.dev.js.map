{"version":3,"sources":["contact1.js"],"names":["mongoose","require","uniqueValidator","connect","process","env","MONGO_URL","mongoDBurl","useNewUrlParser","useUnifiedTopology","db","connection","on","console","error","bind","postSchema","Schema","firstname","type","String","required","trim","validate","validator","v","length","message","props","lastname","email","test","value","password","role","plugin","module","exports","Post","model","userSchema"],"mappings":";;AACA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAMC,eAAe,GAAGD,OAAO,CAAC,2BAAD,CAA/B,C,CACA;;;AAEAD,QAAQ,CAACG,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,SAAZ,IAAyBC,UAA1C,EAAsD;AACpDC,EAAAA,eAAe,EAAE,IADmC;AAEpDC,EAAAA,kBAAkB,EAAE;AAFgC,CAAtD;AAIA,IAAMC,EAAE,GAAGV,QAAQ,CAACW,UAApB,C,CACA;;AACAD,EAAE,CAACE,EAAH,CAAM,OAAN,EAAeC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,EAA4B,mBAA5B,CAAf;AAGA,IAAMG,UAAU,GAAG,IAAIhB,QAAQ,CAACiB,MAAb,CAAoB;AACnCC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE,wBAFH;AAGPC,IAAAA,IAAI,EAAE,IAHC;AAIPC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAOA,CAAC,CAACC,MAAF,GAAW,CAAlB;AACD,OAHO;AAIRC,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA;AAAA;AAJD;AAJH,GADwB;AAajCC,EAAAA,QAAQ,EAAE;AACRV,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,wBAFF;AAGRC,IAAAA,IAAI,EAAE,IAHE;AAIRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAOA,CAAC,CAACC,MAAF,GAAW,CAAlB;AACD,OAHO;AAIRC,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA;AAAA;AAJD;AAJF,GAbuB;AAwBjCE,EAAAA,KAAK,EAAE;AACLX,IAAAA,IAAI,EAAEC,MADD;AAELE,IAAAA,IAAI,EAAE,IAFD;AAGJC,IAAAA,QAAQ,EAAE;AACTC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAO,4JAA4JM,IAA5J,CAAiKN,CAAjK,CAAP;AACD,OAHQ;AAITE,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA,yBAAcA,KAAK,CAACI,KAApB;AAAA;AAJA;AAHN,GAxB0B;AAkCjCC,EAAAA,QAAQ,EAAE;AACRd,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,yBAFF;AAGRC,IAAAA,IAAI,EAAE,IAHE;AAIRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,mBAAUC,CAAV,EAAa;AACtB,eAAO,gEAAgEM,IAAhE,CACLN,CADK,CAAP;AAGD,OALO;AAMRE,MAAAA,OAAO,EAAE,iBAACC,KAAD;AAAA;AAAA;AAND;AAJF,GAlCuB;AA+C9B;AACHM,EAAAA,IAAI,EAAE;AACJf,IAAAA,IAAI,EAAEC,MADF;AAEJE,IAAAA,IAAI,EAAE,IAFF;AAGJ,eAAS;AAHL;AAhD2B,CAApB,CAAnB;AAwDAN,UAAU,CAACmB,MAAX,CAAkBjC,eAAlB;AAEAkC,MAAM,CAACC,OAAP,CAAeC,IAAf,GAAsBtC,QAAQ,CAACuC,KAAT,CAAe,MAAf,EAAuBC,UAAvB,CAAtB","sourcesContent":["\r\n// Using Node.js `require()`\r\nvar mongoose = require(\"mongoose\");\r\nconst uniqueValidator = require(\"mongoose-unique-validator\");\r\n//var mongoDBurl = \"mongodb://localhost:27017/blog\";\r\n\r\nmongoose.connect(process.env.MONGO_URL || mongoDBurl, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n});\r\nconst db = mongoose.connection;\r\n/// To log the Mongoose erros to the console directly\r\ndb.on(\"error\", console.error.bind(console, \"connection error:\"));\r\n\r\n\r\nconst postSchema = new mongoose.Schema({\r\n    firstname: {\r\n        type: String,\r\n        required: \"First name is required\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return v.length > 3;\r\n          },\r\n          message: (props) => `Please ensure you have entered your comment.`,\r\n        },\r\n      },    \r\n      \r\n      lastname: {\r\n        type: String,\r\n        required: \"First name is required\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return v.length > 3;\r\n          },\r\n          message: (props) => `Please ensure you have entered your comment.`,\r\n        },\r\n      },    \r\n      email: {\r\n        type: String,\r\n        trim: true,\r\n         validate: {\r\n          validator: function (v) {\r\n            return /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(v);\r\n          },\r\n          message: (props) => `${props.value} is not a valid Email address.`,\r\n        },\r\n      },\r\n      password: {\r\n        type: String,\r\n        required: \"Please enter a password\",\r\n        trim: true,\r\n        validate: {\r\n          validator: function (v) {\r\n            return /(?=(.*[0-9]))((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.{6,}$/.test(\r\n              v\r\n            );\r\n          },\r\n          message: (props) =>\r\n            `Password should have 1 lowercase letter, 1 uppercase letter, 1 number, and be at least 6 characters.`,\r\n        },\r\n      }, // more fields defined below\r\n      role: {\r\n        type: String,\r\n        trim: true,\r\n        default: \"customer\",\r\n      },\r\n\r\n\r\n});\r\npostSchema.plugin(uniqueValidator);\r\n\r\nmodule.exports.Post = mongoose.model('Post', userSchema);"],"file":"contact1.dev.js"}